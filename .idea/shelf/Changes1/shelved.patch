Index: app/src/main/java/org/cosmic/ide/activity/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.cosmic.ide.activity\n\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.util.Log\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.Button\nimport android.widget.PopupMenu\nimport android.widget.TextView\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AlertDialog\nimport androidx.core.content.res.ResourcesCompat\nimport androidx.core.view.GravityCompat\nimport androidx.drawerlayout.widget.DrawerLayout\nimport androidx.viewpager2.widget.ViewPager2.OnPageChangeCallback\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport com.google.android.material.tabs.TabLayout\nimport com.google.android.material.tabs.TabLayout.OnTabSelectedListener\nimport com.google.android.material.tabs.TabLayoutMediator\nimport io.github.rosemoe.sora.widget.CodeEditor\nimport org.cosmic.ide.R\nimport org.cosmic.ide.activity.model.FileViewModel\nimport org.cosmic.ide.activity.model.GitViewModel\nimport org.cosmic.ide.activity.model.MainViewModel\nimport org.cosmic.ide.android.task.jar.JarTask\nimport org.cosmic.ide.code.decompiler.FernFlowerDecompiler\nimport org.cosmic.ide.code.disassembler.JavapDisassembler\nimport org.cosmic.ide.code.formatter.GoogleJavaFormatter\nimport org.cosmic.ide.code.formatter.ktfmtFormatter\nimport org.cosmic.ide.common.util.CoroutineUtil.execute\nimport org.cosmic.ide.common.util.CoroutineUtil.inParallel\nimport org.cosmic.ide.compiler.CompileTask\nimport org.cosmic.ide.compiler.CompileTask.CompilerListeners\nimport org.cosmic.ide.databinding.ActivityMainBinding\nimport org.cosmic.ide.databinding.DialogLibraryDownloaderBinding\nimport org.cosmic.ide.dependency.resolver.getArtifact\nimport org.cosmic.ide.fragment.CodeEditorFragment\nimport org.cosmic.ide.project.JavaProject\nimport org.cosmic.ide.ui.editor.adapter.PageAdapter\nimport org.cosmic.ide.util.AndroidUtilities\nimport org.cosmic.ide.util.Constants\nimport org.cosmic.ide.util.EditorUtil.getColorScheme\nimport org.cosmic.ide.util.EditorUtil.javaLanguage\nimport org.cosmic.ide.util.addSystemWindowInsetToPadding\nimport org.jf.dexlib2.DexFileFactory\nimport org.jf.dexlib2.Opcodes\nimport org.jf.dexlib2.iface.ClassDef\nimport java.io.File\nimport java.io.IOException\n\nclass MainActivity : BaseActivity() {\n\n    private lateinit var temp: String\n    private val binding by lazy {\n        ActivityMainBinding.inflate(layoutInflater).also {\n            setContentView(it.root)\n            setSupportActionBar(it.toolbar)\n        }\n    }\n    lateinit var project: JavaProject\n\n    private val tabsAdapter by lazy {\n        PageAdapter(supportFragmentManager, lifecycle)\n    }\n    private val mainViewModel by viewModels<MainViewModel>()\n    private val fileViewModel by viewModels<FileViewModel>()\n    private val loadingDialog by lazy {\n        BottomSheetDialog(this).apply {\n            setContentView(R.layout.dialog_compile_running)\n            setCancelable(false)\n            setCanceledOnTouchOutside(false)\n       }\n    }\n    private val libraryBinding by lazy {\n        DialogLibraryDownloaderBinding.inflate(layoutInflater)\n    }\n    private val libraryDialog: AlertDialog by lazy {\n        val dialog = MaterialAlertDialogBuilder(\n            this, AndroidUtilities.dialogFullWidthButtonsThemeOverlay\n        ).apply {\n            setTitle(\"Library Downloader\")\n            setView(libraryBinding.root)\n            setPositiveButton(getString(R.string.create), null)\n            setNegativeButton(getString(android.R.string.cancel), null)\n        }\n        dialog.create()\n    }\n\n    private val compileTask by lazy {\n        CompileTask(\n            this,\n            object : CompilerListeners {\n                private var failed = false\n                override fun onCurrentBuildStageChanged(stage: String) {\n                    failed = false\n                    changeLoadingDialogBuildStage(stage)\n                }\n\n                override fun onSuccess() {\n                    if (loadingDialog.isShowing) {\n                        loadingDialog.dismiss()\n                    }\n                }\n\n                override fun onFailed(errorMessage: String?) {\n                    failed = true\n                    Handler(Looper.getMainLooper())\n                        .post {\n                            if (loadingDialog.isShowing) {\n                                loadingDialog.dismiss()\n                            }\n                            AndroidUtilities.showSimpleAlert(\n                                this@MainActivity,\n                                getString(R.string.compilation_result_failed),\n                                errorMessage,\n                                getString(R.string.dialog_close),\n                                getString(R.string.copy_stacktrace)\n                            ) { _, which ->\n                                if (which\n                                    == DialogInterface.BUTTON_NEGATIVE\n                                ) {\n                                    AndroidUtilities\n                                        .copyToClipboard(\n                                            errorMessage\n                                        )\n                                }\n                            }\n                        }\n                }\n\n                override val isSuccessTillNow = !failed\n            }\n        )\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        project = JavaProject(File(intent.getStringExtra(Constants.PROJECT_PATH).toString()))\n        binding.appBar.addSystemWindowInsetToPadding(top = true)\n        if (binding.root is DrawerLayout) {\n            val drawer = binding.root as DrawerLayout\n            binding.toolbar.setNavigationOnClickListener {\n                if (drawer.isDrawerOpen(GravityCompat.START)) {\n                    mainViewModel.setDrawerState(false)\n                } else {\n                    mainViewModel.setDrawerState(true)\n                }\n            }\n            drawer.addDrawerListener(\n                object : DrawerLayout.SimpleDrawerListener() {\n                    override fun onDrawerOpened(p1: View) {\n                        mainViewModel.setDrawerState(true)\n                    }\n\n                    override fun onDrawerClosed(p1: View) {\n                        mainViewModel.setDrawerState(false)\n                    }\n                })\n        }\n        fileViewModel.refreshNode(project.rootFile)\n        supportActionBar?.title = project.projectName\n        binding.viewPager.apply {\n            adapter = tabsAdapter\n            isUserInputEnabled = false\n            registerOnPageChangeCallback(\n                object : OnPageChangeCallback() {\n                    override fun onPageSelected(position: Int) {\n                        mainViewModel.setCurrentPosition(position)\n                    }\n                })\n        }\n        binding.tabLayout.addOnTabSelectedListener(\n            object : OnTabSelectedListener {\n                override fun onTabUnselected(tab: TabLayout.Tab) {}\n                override fun onTabReselected(tab: TabLayout.Tab) {\n                    val popup = PopupMenu(this@MainActivity, tab.view)\n                    popup.menu.add(0, 0, 1, getString(R.string.menu_close_file))\n                    popup.menu.add(0, 1, 2, getString(R.string.menu_close_others))\n                    popup.menu.add(0, 2, 3, getString(R.string.menu_close_all))\n                    popup.setOnMenuItemClickListener { item ->\n                        when (item.itemId) {\n                            0 -> mainViewModel.removeFile(\n                                mainViewModel.currentFile\n                            )\n                            1 -> mainViewModel.removeOthers(\n                                mainViewModel.currentFile\n                            )\n                            2 -> mainViewModel.clear()\n                        }\n                        true\n                    }\n                    popup.show()\n                }\n\n                override fun onTabSelected(p1: TabLayout.Tab) {\n                    updateTab(p1, p1.position)\n                }\n            })\n        TabLayoutMediator(\n            binding.tabLayout, binding.viewPager, true, false\n        ) { tab, pos ->\n            updateTab(\n                tab,\n                pos\n            )\n        }\n            .attach()\n        GitViewModel.INSTANCE.apply {\n            setPath(project.projectDirPath)\n            postCheckout = {\n                fileViewModel.refreshNode(project.rootFile)\n            }\n            onSave = {\n                mainViewModel.clear()\n            }\n        }\n        mainViewModel\n            .files\n            .observe(\n                this\n            ) { files ->\n                tabsAdapter.submitList(files)\n                if (files.isEmpty()) {\n                    binding.viewPager.visibility = View.GONE\n                    binding.tabLayout.removeAllTabs()\n                    binding.tabLayout.visibility = View.GONE\n                    binding.emptyContainer.visibility = View.VISIBLE\n                    mainViewModel.setCurrentPosition(-1)\n                } else {\n                    binding.tabLayout.visibility = View.VISIBLE\n                    binding.emptyContainer.visibility = View.GONE\n                    binding.viewPager.visibility = View.VISIBLE\n                }\n            }\n        mainViewModel\n            .currentPosition\n            .observe(\n                this\n            ) { position ->\n                if (position == -1) {\n                    return@observe\n                }\n                binding.viewPager.currentItem = position\n            }\n        if (binding.root is DrawerLayout) {\n            mainViewModel\n                .drawerState\n                .observe(\n                    this\n                ) { isOpen ->\n                    if (isOpen) {\n                        (binding.root as DrawerLayout).open()\n                    } else {\n                        (binding.root as DrawerLayout).close()\n                    }\n                }\n        }\n        savedInstanceState?.let { restoreViewState(it) }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        if (binding.root is DrawerLayout) {\n            outState.putBoolean(\n                Constants.DRAWER_STATE,\n                (binding.root as DrawerLayout).isDrawerOpen(GravityCompat.START)\n            )\n        }\n        super.onSaveInstanceState(outState)\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.main_menu, menu)\n        if (GitViewModel.INSTANCE.hasRepo.value!!) {\n            menu.findItem(R.id.action_git).isVisible = true\n        }\n        return super.onCreateOptionsMenu(menu)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        val tag = \"f\" + tabsAdapter.getItemId(binding.viewPager.currentItem)\n        val fragment = supportFragmentManager.findFragmentByTag(tag)\n        val id = item.itemId\n        if (id == R.id.action_format && fragment is CodeEditorFragment) {\n            execute {\n                val current = mainViewModel.currentFile\n                if (current?.extension.equals(\"java\")) {\n                    val formatter = GoogleJavaFormatter(\n                        fragment\n                            .getEditor()\n                            .text\n                            .toString()\n                    )\n                    temp = formatter.format()\n                } else if (current?.extension.equals(\"kt\") || current?.extension.equals(\"kts\")) {\n                    ktfmtFormatter(current.toString()).format()\n                    try {\n                        temp =\n                            current?.readText()!!\n                    } catch (e: IOException) {\n                        Log.d(\n                            TAG,\n                            getString(R.string.error_file_open),\n                            e\n                        )\n                    }\n                } else {\n                    temp = fragment\n                        .getEditor()\n                        .text\n                        .toString()\n                }\n            }\n            fragment.getEditor().text.replace(0, fragment.getEditor().text.toString().length, temp)\n        } else if (id == R.id.action_settings) {\n            startActivity(Intent(this, SettingsActivity::class.java))\n        } else if (id == R.id.action_run) {\n            true.compile(blockMainThread = false)\n        } else if (id == R.id.action_disassemble) {\n            disassemble()\n        } else if (id == R.id.action_class2java) {\n            decompile()\n        } else if (id == R.id.action_undo) {\n            if (fragment is CodeEditorFragment) {\n                fragment.undo()\n            }\n        } else if (id == R.id.action_redo) {\n            if (fragment is CodeEditorFragment) {\n                fragment.redo()\n            }\n        } else if (id == R.id.library_downloader) {\n            showLibraryDialog()\n        } else if (id == R.id.action_git) {\n            startActivity(Intent(this, GitActivity::class.java))\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n    private fun restoreViewState(state: Bundle) {\n        if (binding.root is DrawerLayout) {\n            val b = state.getBoolean(Constants.DRAWER_STATE, false)\n            mainViewModel.setDrawerState(b)\n        }\n    }\n\n    private fun updateTab(tab: TabLayout.Tab, pos: Int) {\n        val currentFile = mainViewModel.files.value!![pos]\n        tab.text = if (currentFile != null) currentFile.name else \"Unknown\"\n    }\n\n    private fun showLibraryDialog() {\n        if (!libraryDialog.isShowing) {\n            libraryDialog.show()\n            val createBtn: Button = libraryDialog.findViewById(android.R.id.button1)!!\n            createBtn.setOnClickListener {\n                val groupId = libraryBinding.groupId.text.toString()\n                val artifactId = libraryBinding.artifactId.text.toString()\n                val version = libraryBinding.version.text.toString()\n                inParallel {\n                    val artifact = getArtifact(groupId, artifactId, version)\n                    if (artifact == null) {\n                        runOnUiThread {\n                            AndroidUtilities.showToast(\"Library not available.\")\n                            libraryDialog.dismiss()\n                        }\n                        return@inParallel\n                    }\n                    try {\n                        artifact.downloadArtifact(File(project.libDirPath))\n                        runOnUiThread {\n                            AndroidUtilities.showToast(\"Library $artifactId downloaded.\")\n                            libraryDialog.dismiss()\n                        }\n                    } catch (e: IllegalStateException) {\n                        runOnUiThread {\n                            AndroidUtilities.showSimpleAlert(\n                                this,\n                                e.localizedMessage,\n                                e.stackTraceToString(),\n                                getString(R.string.dialog_close),\n                                getString(R.string.copy_stacktrace)\n                            ) { _, which ->\n                                if (which == DialogInterface.BUTTON_NEGATIVE) {\n                                    AndroidUtilities.copyToClipboard(e.localizedMessage)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            libraryBinding.groupId.setText(\"\")\n            libraryBinding.artifactId.setText(\"\")\n            libraryBinding.version.setText(\"\")\n        }\n    }\n\n    /* So, this method is also triggered from another thread (CompileTask.java)\n     * We need to make sure that this code is executed on main thread */\n    private fun changeLoadingDialogBuildStage(currentStage: String) {\n        if (loadingDialog.isShowing) {\n            runOnUiThread {\n                val stage: TextView =\n                    loadingDialog.findViewById(R.id.stage_txt)!!\n                stage.text = currentStage\n            }\n        }\n    }\n\n    private fun Boolean.compile(blockMainThread: Boolean) {\n        compileTask.setExecution(this)\n        loadingDialog.show()\n        if (blockMainThread) {\n            execute(compileTask)\n            return\n        }\n        inParallel(compileTask)\n    }\n\n    private fun decompile() {\n        val classes = classesFromDex ?: return\n        listDialog(\n            getString(R.string.select_class_decompile),\n            classes\n        ) { _, pos ->\n            val className = classes[pos].replace(\".\", \"/\")\n            var dec = true\n            execute {\n                try {\n                    JarTask().doFullTask(project)\n                    temp = FernFlowerDecompiler()\n                        .decompile(\n                            className,\n                            File(\n                                project.binDirPath,\n                                \"classes.jar\"\n                            )\n                        )\n                } catch (e: Exception) {\n                    dec = false\n                    AndroidUtilities.showSimpleAlert(\n                        this,\n                        getString(R.string.error_class_decompile),\n                        e.localizedMessage,\n                        getString(R.string.dialog_close),\n                        getString(R.string.copy_stacktrace),\n                        null,\n                        (\n                                DialogInterface.OnClickListener { _, which ->\n                                    if (which == DialogInterface.BUTTON_NEGATIVE) {\n                                        AndroidUtilities.copyToClipboard(\n                                            e.localizedMessage\n                                        )\n                                    }\n                                }\n                                )\n                    )\n                }\n            }\n            if (!dec) return@listDialog\n            val edi = CodeEditor(this)\n            edi.typefaceText = ResourcesCompat.getFont(\n                this,\n                R.font.jetbrains_mono_light\n            )\n            edi.colorScheme = getColorScheme(this)\n            edi.setTextSize(12f)\n            edi.setEditorLanguage(javaLanguage)\n            edi.setText(temp)\n            val dialog =\n                AlertDialog.Builder(this).setView(edi).create()\n            dialog.setCanceledOnTouchOutside(true)\n            dialog.show()\n        }\n    }\n\n    private fun disassemble() {\n        val classes = classesFromDex ?: return\n        listDialog(\n            getString(R.string.select_class_disassemble),\n            classes\n        ) { _, pos ->\n            val claz = classes[pos].replace(\".\", \"/\")\n            var disassembled = \"\"\n            try {\n                disassembled = JavapDisassembler(\n                    project.binDirPath +\n                        \"classes\" +\n                        \"/\" +\n                        claz +\n                        \".class\"\n                )\n                    .disassemble()\n            } catch (e: Throwable) {\n                AndroidUtilities.showSimpleAlert(\n                    this,\n                    getString(R.string.error_class_disassemble),\n                    e.localizedMessage,\n                    getString(R.string.dialog_close),\n                    getString(R.string.copy_stacktrace)\n                ) { _, which ->\n                    if (which == DialogInterface.BUTTON_NEGATIVE) {\n                        AndroidUtilities.copyToClipboard(e.localizedMessage)\n                    }\n                }\n            }\n            val edi = CodeEditor(this)\n            edi.typefaceText = ResourcesCompat.getFont(\n                this,\n                R.font.jetbrains_mono_light\n            )\n            edi.colorScheme = getColorScheme(this)\n            edi.setTextSize(12f)\n            edi.setEditorLanguage(javaLanguage)\n            edi.setText(disassembled)\n            val dialog =\n                AlertDialog.Builder(this).setView(edi).create()\n            dialog.setCanceledOnTouchOutside(true)\n            dialog.show()\n        }\n    }\n\n    fun listDialog(\n        title: String?,\n        items: Array<String>,\n        listener: DialogInterface.OnClickListener\n    ) {\n        runOnUiThread {\n            if (items.size == 1) {\n                listener.onClick(null, 0)\n                return@runOnUiThread\n            }\n            MaterialAlertDialogBuilder(this)\n                .setTitle(title)\n                .setItems(items, listener)\n                .create()\n                .show()\n        }\n    }\n\n    /* Used to find all the compiled classes from the output dex file */\n    val classesFromDex: Array<String>?\n        get() = try {\n            val dex = File(project.binDirPath + \"classes.dex\")\n            /* If the project doesn't seem to have the dex file, just recompile it */\n            if (!dex.exists()) {\n                AndroidUtilities.showToast(getString(R.string.project_not_compiled))\n            }\n            val classes = mutableListOf<String>()\n            val dexfile = DexFileFactory.loadDexFile(dex.absolutePath, Opcodes.forApi(32))\n            for (f in dexfile.classes.toTypedArray<ClassDef>()) {\n                val name = f.type.replace(\"/\", \".\") // convert class name to standard form\n                classes.add(name.substring(1, name.length - 1))\n            }\n            classes.toTypedArray()\n        } catch (e: Exception) {\n            AndroidUtilities.showSimpleAlert(\n                this,\n                getString(R.string.error_classes_get_dex),\n                e.localizedMessage,\n                getString(R.string.dialog_close),\n                getString(R.string.copy_stacktrace)\n            ) { _, which ->\n                if (which == DialogInterface.BUTTON_NEGATIVE) {\n                    AndroidUtilities.copyToClipboard(e.localizedMessage)\n                }\n            }\n            null\n        }\n\n    companion object {\n        const val TAG = \"MainActivity\"\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/org/cosmic/ide/activity/MainActivity.kt b/app/src/main/java/org/cosmic/ide/activity/MainActivity.kt
--- a/app/src/main/java/org/cosmic/ide/activity/MainActivity.kt	(revision 8d1ed1d7d45f214173dcb8b6035dbdd1a8991d69)
+++ b/app/src/main/java/org/cosmic/ide/activity/MainActivity.kt	(date 1677685060595)
@@ -98,7 +98,6 @@
             object : CompilerListeners {
                 private var failed = false
                 override fun onCurrentBuildStageChanged(stage: String) {
-                    failed = false
                     changeLoadingDialogBuildStage(stage)
                 }
 
@@ -110,6 +109,7 @@
 
                 override fun onFailed(errorMessage: String?) {
                     failed = true
+                    Log.i(TAG, "onFailed: $errorMessage")
                     Handler(Looper.getMainLooper())
                         .post {
                             if (loadingDialog.isShowing) {
@@ -134,7 +134,7 @@
                         }
                 }
 
-                override val isSuccessTillNow = !failed
+                override val isFailed = failed
             }
         )
     }
@@ -211,7 +211,7 @@
             )
         }
             .attach()
-        GitViewModel.INSTANCE.apply {
+        /*GitViewModel.INSTANCE.apply {
             setPath(project.projectDirPath)
             postCheckout = {
                 fileViewModel.refreshNode(project.rootFile)
@@ -219,7 +219,7 @@
             onSave = {
                 mainViewModel.clear()
             }
-        }
+        }*/
         mainViewModel
             .files
             .observe(
@@ -276,9 +276,9 @@
 
     override fun onCreateOptionsMenu(menu: Menu): Boolean {
         menuInflater.inflate(R.menu.main_menu, menu)
-        if (GitViewModel.INSTANCE.hasRepo.value!!) {
+/*        if (GitViewModel.INSTANCE.hasRepo.value!!) {
             menu.findItem(R.id.action_git).isVisible = true
-        }
+        }*/
         return super.onCreateOptionsMenu(menu)
     }
 
@@ -514,7 +514,7 @@
                 R.font.jetbrains_mono_light
             )
             edi.colorScheme = getColorScheme(this)
-            edi.setTextSize(12f)
+            edi.setTextSize(14f)
             edi.setEditorLanguage(javaLanguage)
             edi.setText(disassembled)
             val dialog =
